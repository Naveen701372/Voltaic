import { NextRequest, NextResponse } from 'next/server';
import { promises as fs } from 'fs';
import path from 'path';

export async function POST(req: NextRequest) {
  try {
    const { projectId, title, files } = await req.json();

    if (!projectId || !files || !Array.isArray(files)) {
      return NextResponse.json(
        { success: false, error: 'Invalid request parameters' },
        { status: 400 }
      );
    }

    // Create project directory
    const projectDir = path.join(process.cwd(), 'generated-apps', projectId);
    await fs.mkdir(projectDir, { recursive: true });

    // Create src directory
    const srcDir = path.join(projectDir, 'src');
    await fs.mkdir(srcDir, { recursive: true });

    // Create app directory
    const appDir = path.join(srcDir, 'app');
    await fs.mkdir(appDir, { recursive: true });

    // Create components directory
    const componentsDir = path.join(srcDir, 'components');
    await fs.mkdir(componentsDir, { recursive: true });

    // Write each file
    for (const file of files) {
      // Remove src/ prefix from file.path since we're already in the src directory
      const relativePath = file.path.startsWith('src/') ? file.path.replace('src/', '') : file.path;
      const filePath = path.join(srcDir, relativePath);
      const fileDir = path.dirname(filePath);

      console.log(`üìÅ Writing file: ${file.path} -> ${filePath}`);
      console.log(`üìÅ Directory: ${fileDir}`);

      // Ensure directory exists
      await fs.mkdir(fileDir, { recursive: true });

      // Write file content
      await fs.writeFile(filePath, file.content, 'utf8');
      console.log(`‚úÖ File written successfully: ${filePath}`);
    }

    // Create package.json for the project
    const packageJson = {
      name: projectId,
      version: '0.1.0',
      private: true,
      scripts: {
        dev: 'next dev -p 3003',
        build: 'next build',
        start: 'next start',
        lint: 'next lint'
      },
      dependencies: {
        react: '^18',
        'react-dom': '^18',
        next: '14.0.4',
        'lucide-react': '^0.263.1'
      },
      devDependencies: {
        typescript: '^5',
        '@types/node': '^20',
        '@types/react': '^18',
        '@types/react-dom': '^18',
        autoprefixer: '^10.0.1',
        postcss: '^8',
        tailwindcss: '^3.3.0'
      }
    };

    await fs.writeFile(
      path.join(projectDir, 'package.json'),
      JSON.stringify(packageJson, null, 2),
      'utf8'
    );

    // Skip creating tailwind.config.js and next.config.js - they're not needed for the preview

    // Create globals.css
    const globalsCss = `@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  .glass-primary {
    backdrop-filter: blur(16px) saturate(180%);
    background-color: rgba(255, 255, 255, 0.75);
    border: 1px solid rgba(255, 255, 255, 0.18);
    border-radius: 12px;
  }
  
  .glass-dark {
    backdrop-filter: blur(16px) saturate(180%);
    background-color: rgba(17, 25, 40, 0.75);
    border: 1px solid rgba(255, 255, 255, 0.125);
    border-radius: 12px;
  }

  .glass-button {
    backdrop-filter: blur(10px);
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
    border: 1px solid rgba(255, 255, 255, 0.18);
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  .glass-button:hover {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.1));
    transform: translateY(-1px);
  }

  @keyframes blob {
    0% { transform: translate(0px, 0px) scale(1); }
    33% { transform: translate(30px, -50px) scale(1.1); }
    66% { transform: translate(-20px, 20px) scale(0.9); }
    100% { transform: translate(0px, 0px) scale(1); }
  }

  .animate-blob {
    animation: blob 7s infinite;
  }

  .animation-delay-2000 {
    animation-delay: 2s;
  }
}`;

    await fs.writeFile(
      path.join(srcDir, 'app', 'globals.css'),
      globalsCss,
      'utf8'
    );

    // Create layout.tsx
    const layoutTsx = `import './globals.css'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: '${title}',
  description: 'Generated by Voltaic AI',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}`;

    await fs.writeFile(
      path.join(srcDir, 'app', 'layout.tsx'),
      layoutTsx,
      'utf8'
    );

    console.log(`Successfully wrote ${files.length} files to ${projectDir}`);
    console.log(`üìã Files written summary:`);
    for (const file of files) {
      const relativePath = file.path.startsWith('src/') ? file.path.replace('src/', '') : file.path;
      const finalPath = path.join(srcDir, relativePath);
      console.log(`  ‚úÖ ${file.path} -> ${finalPath}`);
    }

    return NextResponse.json({
      success: true,
      projectDir,
      filesWritten: files.length,
      filesList: files.map(f => f.path)
    });

  } catch (error) {
    console.error('File writing error:', error);
    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
} 